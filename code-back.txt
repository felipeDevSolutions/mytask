BACKEND:

üì¶backend
 ‚î£ üìÇnode_modules
 ‚î£ üìÇsrc
 ‚îÉ ‚î£ üìÇcontrollers
 ‚îÉ ‚îÉ ‚î£ üìúprojectController.js
 ‚îÉ ‚îÉ ‚î£ üìúsectionController.js
 ‚îÉ ‚îÉ ‚î£ üìútaskController.js
 ‚îÉ ‚îÉ ‚îó üìúUserController.js
 ‚îÉ ‚î£ üìÇmiddleware
 ‚îÉ ‚îÉ ‚îó üìúauthMiddleware.js
 ‚îÉ ‚î£ üìÇmodels
 ‚îÉ ‚îÉ ‚î£ üìúProject.js
 ‚îÉ ‚îÉ ‚î£ üìúSection.js
 ‚îÉ ‚îÉ ‚î£ üìúTask.js
 ‚îÉ ‚îÉ ‚îó üìúuser.js
 ‚îÉ ‚î£ üìÇroutes
 ‚îÉ ‚îÉ ‚î£ üìúauthRoutes.js
 ‚îÉ ‚îÉ ‚î£ üìúprojectRoutes.js
 ‚îÉ ‚îÉ ‚î£ üìúsectionRoutes.js
 ‚îÉ ‚îÉ ‚î£ üìútaskRoutes.js
 ‚îÉ ‚îÉ ‚îó üìúuserRoutes.js
 ‚îÉ ‚î£ üìÇtests
 ‚îÉ ‚îÉ ‚îó üìúuser.test.js
 ‚îÉ ‚î£ üìúapp.js
 ‚îÉ ‚îó üìúvercel.json
 ‚î£ üìú.env
 ‚î£ üìú.gitignore
 ‚î£ üìúcode-back projects.txt
 ‚î£ üìúcode-back.txt
 ‚î£ üìúfirebase-service-account.json
 ‚î£ üìúfirebaseConfig.js
 ‚î£ üìúpackage-lock.json
 ‚îó üìúpackage.json


app.js:
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const { db, auth, admin } = require('../firebaseConfig');
const jwt = require('jsonwebtoken');
const bcryptjs = require('bcryptjs');
const userRouter = require('./routes/userRoutes');
const authRouter = require('./routes/authRoutes');
const projectRouter = require('./routes/projectRoutes');

dotenv.config();

const app = express();
const port = process.env.PORT;

// Middleware para habilitar CORS
app.use(cors());
app.use(express.json());

// Middleware para verificar o token JWT
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (token == null) {
    return res.status(401).json({ message: 'Token de autentica√ß√£o ausente' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Token inv√°lido' });
    }
    req.user = user;
    next();
  });
};

// Rotas
app.use('/api/users', authenticateToken, userRouter);
app.use('/api', authRouter);
app.use('/api/projects', projectRouter);

// Iniciar o servidor
app.listen(port, () => {
  console.log(`Servidor rodando em http://localhost:${port}`);
});

module.exports = app;


================================================================================================


.env:
PORT=5000
AUTHORIZATION_CODE=felipeDev
JWT_SECRET=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImVlN2QzZGE4LTQ0MzgtNDJhOC1iY2Y4LWI5YzM4ODRhYjYxYSIsImlhdCI6MTY0OTM4MTMwMSwiZXhwIjoxNjQ5Mzg0OTAxfQ.d9eTxzfo44oH8HrAZ0Yx8SjWWUNlIhj-74L4cENoLxI
EMAIL_USER=felipeedev2024@gmail.com
EMAIL_PASS=jsqbcpropjhfhacy



==================================================================================================


firebaseConfig.js:
const admin = require('firebase-admin');
const serviceAccount = require('./firebase-service-account.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  databaseURL: 'https://app-fiz.firebaseio.com',
});

const db = admin.firestore();
const auth = admin.auth();

module.exports = { admin, db, auth };


==================================================================================================


authMiddleware.js:
const jwt = require('jsonwebtoken');

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (token == null) {
    return res.status(401).json({ message: 'Token de autentica√ß√£o ausente' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Token inv√°lido' });
    }
    req.user = user; 
    next();
  });
};

module.exports = authenticateToken;



==================================================================================================


user.js:
const { db } = require('../../firebaseConfig');

class User {
  static async create(email, password, uid) {
    const userDocRef = db.collection('users').doc();
    await userDocRef.set({
      id: userDocRef.id,
      email,
      password,
      uid,
    });
    return userDocRef.id; // Retorna o ID do novo usu√°rio
  }

  static async findById(userId) {
    const userDoc = await db.collection('users').doc(userId).get();
    if (userDoc.exists) {
      return userDoc.data();
    }
    return null;
  }

  static async updatePassword(userId, newPassword) {
    await db.collection('users').doc(userId).update({ password: newPassword });
  }

  static async delete(userId) {
    await db.collection('users').doc(userId).delete();
  }
}

module.exports = User;



===================================================================================================


UserController.js:
const User = require('../models/user');
const bcryptjs = require('bcryptjs');
const { auth, db } = require('../../firebaseConfig'); 
const jwt = require('jsonwebtoken');

class UserController {
  static async signup(req, res) {
    const { email, password } = req.body;

    try {
      // Verifica se o email j√° existe
      const userExists = await db.collection('users').where('email', '==', email).get();
      if (!userExists.empty) {
        return res.status(409).json({ message: 'Email j√° cadastrado' });
      }

      // Hash da senha
      const hashedPassword = await bcryptjs.hash(password, 10);

      // Criar usu√°rio no Firebase
      const userRecord = await auth.createUser({
        email,
        password: hashedPassword,
      });

      const userId = userRecord.uid; 

      // Criar usu√°rio no Firestore
      const newUserId = await User.create(email, hashedPassword, userId);

      res.status(201).json({ message: 'Usu√°rio cadastrado com sucesso!', id: newUserId });

    } catch (error) {
      console.error('Erro ao cadastrar usu√°rio: ', error);
      res.status(500).json({ message: 'Erro ao cadastrar usu√°rio' });
    }
  }

  static async login(req, res) {
    const { email, password } = req.body;
  
    try {
      // Verificar se o usu√°rio existe
      const userDoc = await db.collection('users').where('email', '==', email).get();
      if (userDoc.empty) {
        return res.status(400).json({ message: 'Credenciais inv√°lidas' });
      }
  
      const user = userDoc.docs[0].data(); // Obter o primeiro documento
      const userId = user.id; // Obter o ID do usu√°rio do Firestore
  
      // Comparar senha
      const isValidPassword = await bcryptjs.compare(password, user.password);
      if (!isValidPassword) {
        return res.status(400).json({ message: 'Credenciais inv√°lidas' });
      }
  
      // Cria token JWT (definindo um tempo de expira√ß√£o - exemplo: 1 hora)
      const token = jwt.sign({ id: userId, email: user.email, uid: user.uid }, process.env.JWT_SECRET, { expiresIn: '1h' });
  
      res.status(200).json({ token, user });
  
    } catch (error) {
      console.error('Erro ao realizar login: ', error);
      res.status(500).json({ message: 'Erro ao realizar login' });
    }
  }

  static async getUsers(req, res) { 
    try {
      const users = [];
      const usersSnapshot = await db.collection('users').get();
      usersSnapshot.forEach((doc) => {
        users.push({ id: doc.id, ...doc.data() });
      });
      res.status(200).json(users);
  
    } catch (error) {
      console.error('Erro ao listar usu√°rios: ', error);
      res.status(500).json({ message: 'Erro ao listar usu√°rios' });
    }
  }

  static async updatePassword(req, res) {
    const userId = req.params.userId;
    const { oldPassword, newPassword, confirmPassword } = req.body;

    try {
      // Verificar se a senha antiga est√° correta
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
      }

      const isValidOldPassword = await bcryptjs.compare(oldPassword, user.password); 
      if (!isValidOldPassword) {
        return res.status(400).json({ message: 'Senha antiga inv√°lida' });
      }

      // Verificar se as novas senhas coincidem
      if (newPassword !== confirmPassword) {
        return res.status(400).json({ message: 'As novas senhas n√£o coincidem' });
      }

      // Hash da nova senha
      const hashedNewPassword = await bcryptjs.hash(newPassword, 10);

      // Atualizar senha no Firestore
      await User.updatePassword(userId, hashedNewPassword);

      res.status(200).json({ message: 'Senha atualizada com sucesso!' });

    } catch (error) {
      console.error('Erro ao atualizar senha: ', error);
      res.status(500).json({ message: 'Erro ao atualizar senha' });
    }
  }

  static async deleteUser(req, res) {
    const userId = req.params.userId;

    try {
      console.log('Excluindo usu√°rio com ID:', userId);

      // Obter o uid do usu√°rio do Firestore antes de deletar
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
      }
      const uid = user.uid;

      // Deletar usu√°rio do Firebase Auth
      await auth.deleteUser(uid);
      console.log('Usu√°rio exclu√≠do do Firebase Auth!');

      // Deletar usu√°rio do Firestore
      await User.delete(userId);
      console.log('Usu√°rio exclu√≠do do Firestore!');

      console.log('Usu√°rio exclu√≠do com sucesso!');
      res.status(200).json({ message: 'Usu√°rio exclu√≠do com sucesso!' });

    } catch (error) {
      console.error('Erro ao excluir usu√°rio: ', error);
      res.status(500).json({ message: 'Erro ao excluir usu√°rio' });
    }
  }
}

module.exports = UserController;


===================================================================================================


userRoutes.js:
const express = require('express');
const router = express.Router();
const authenticateToken = require('../middleware/authMiddleware'); 
const UserController = require('../controllers/UserController');

// Listar usu√°rios (Protegida por autentica√ß√£o)
router.get('/', authenticateToken, UserController.getUsers);

// Atualizar senha de um usu√°rio 
router.put('/:userId/password', authenticateToken, UserController.updatePassword);

// Excluir usu√°rio (Protegida por autentica√ß√£o)
router.delete('/:userId', authenticateToken, UserController.deleteUser);

module.exports = router;



=======================================================================================================


authRoutes.js:
const express = require('express');
const router = express.Router();
const { db } = require('../../firebaseConfig');
const admin = require('firebase-admin');
const jwt = require('jsonwebtoken');
const bcryptjs = require('bcryptjs');
const UserController = require('../controllers/UserController');
const nodemailer = require('nodemailer');

// Cadastro de usu√°rio
router.post('/signup', UserController.signup);

// Login de usu√°rio
router.post('/login', UserController.login);

// Valida√ß√£o de Token (usada pelo AuthContext.js)
router.get('/validate', async (req, res) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (token == null) {
    return res.status(401).json({ message: 'Token de autentica√ß√£o ausente' });
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ message: 'Token inv√°lido' });
    }

    // Retorna os dados do usu√°rio
    res.status(200).json({ user });
  });
});

// Rota para renovar o token
router.post('/refreshToken', async (req, res) => {
  const { token } = req.body; 

  try {
    // Valide o token atual e gere um novo token
    const newToken = await admin.auth().createCustomToken(req.user.uid, {
      validSince: new Date(),
      validUntil: new Date(new Date().getTime() + 1000 * 60 * 60 * 24 * 7) // Validade de 7 dias, por exemplo
    });

    res.status(200).json({ token: newToken, expirationTime: new Date(new Date().getTime() + 1000 * 60 * 60 * 24 * 7).getTime() });
  } catch (error) {
    console.error('Erro ao atualizar token:', error);
    res.status(500).json({ message: 'Erro ao atualizar token' });
  }
});

// Recupera√ß√£o de senha
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;

  try {
    // Gera um link de redefini√ß√£o de senha
    const resetLink = await admin.auth().generatePasswordResetLink(email);

    // Configurar o servi√ßo de email (usando nodemailer)
    let transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS
      }
    });

    let mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'Redefini√ß√£o de Senha',
      text: `Clique no link a seguir para redefinir sua senha: ${resetLink}`
    };

    // Envia o email com o link de redefini√ß√£o de senha
    await transporter.sendMail(mailOptions);

    res.status(200).json({ message: 'Email de redefini√ß√£o de senha enviado com sucesso!' });

  } catch (error) {
    console.error('Erro ao enviar email de redefini√ß√£o de senha:', error);

    // Verifica se o erro √© relacionado √† autentica√ß√£o do Firebase
    if (error.code === 'auth/user-not-found') {
      return res.status(404).json({ message: 'Usu√°rio n√£o encontrado' });
    } else if (error.code === 'auth/invalid-email') {
      return res.status(400).json({ message: 'Email inv√°lido' });
    }

    // Outros erros
    res.status(500).json({ message: 'Erro ao enviar email de redefini√ß√£o de senha' });
  }
});

module.exports = router;



====================================================================================================


Project.js:
const { db, admin } = require('../../firebaseConfig');

const Project = {
  // Cria uma novo projeto
  async create(userId, projectData) {
    try {
      const docRef = await db.collection('users').doc(userId).collection('projects').add({
        project: projectData.project,
        completed: false,
        createdAt: admin.firestore.FieldValue.serverTimestamp(),
      });

      // Recupera o projeto criado com o timestamp
      const projectDoc = await docRef.get();
      const project = {
        id: projectDoc.id,
        ...projectData,
        completed: false,
        createdAt: projectDoc.data().createdAt.toDate(), 
      };

      return project; 
    } catch (error) {
      console.error('Erro ao criar tarefa:', error);
      throw error;
    }
  },

  // Recupera todas os projetos de um usu√°rio
  async getByUser(userId) {
    try {
      const projectsRef = db.collection('users').doc(userId).collection('projects');
      const projectsSnapshot = await projectsRef.get();
      const projects = [];

      projectsSnapshot.forEach(doc => {
        const project = {
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt.toDate(), // Converte o timestamp do Firestore para Date
        };
        projects.push(project);
      });

      return projects;
    } catch (error) {
      console.error('Erro ao recuperar tarefas:', error);
      throw error;
    }
  },

  // Busca um projeto pelo ID
  async getById(userId, projectId) {
    try {
      // Implemente a l√≥gica para buscar o projeto pelo ID no Firebase
      const projectDoc = await db.collection('users').doc(userId).collection('projects').doc(projectId).get();

      if (projectDoc.exists) {
        return { id: projectDoc.id, ...projectDoc.data() };
      } else {
        return null; // Retorna null se o projeto n√£o for encontrado
      }
    } catch (error) {
      throw error;
    }
  },

  // Project.js 
  async findById(userId, projectId) { // Adicione userId como par√¢metro
    try {
      const projectDoc = await db.collection('users').doc(userId).collection('projects').doc(projectId).get();
      if (projectDoc.exists) {
        return { id: projectDoc.id, ...projectDoc.data() };
      } else {
        return null; 
      }
    } catch (error) {
      throw error; 
    }
  },

  // Exclui um projeto
  async delete(userId, projectId) {
    try {
      await db.collection('users').doc(userId).collection('projects').doc(projectId).delete();
      return true;
    } catch (error) {
      console.error('Erro ao excluir tarefa:', error);
      throw error;
    }
  },

  // Adicionar subtarefa a um projeto
  async addSubtask(userId, projectId, subtaskData) {
    try {
      const projectRef = db.collection('users').doc(userId).collection('projects').doc(projectId);
      const projectDoc = await projectRef.get();

      if (!projectDoc.exists) {
        throw new Error('Projeto n√£o encontrado.');
      }

      const newSubtask = {
        id: db.collection('users').doc().id, // ID √∫nico para a subtarefa
        ...subtaskData,
        completed: false,
      };

      await projectRef.update({
        subtasks: admin.firestore.FieldValue.arrayUnion(newSubtask),
      });

      return newSubtask;
    } catch (error) {
      console.error('Erro ao adicionar subtarefa:', error);
      throw error;
    }
  },

  // Editar subtarefa de um projeto
  async updateSubtask(userId, projectId, subtaskId, subtaskData) {
    try {
      const projectRef = db.collection('users').doc(userId).collection('projects').doc(projectId);
      const projectDoc = await projectRef.get();

      if (!projectDoc.exists) {
        throw new Error('Projeto n√£o encontrado.');
      }

      const subtasks = projectDoc.data().subtasks;
      const subtaskIndex = subtasks.findIndex((subtask) => subtask.id === subtaskId);

      if (subtaskIndex === -1) {
        throw new Error('Subtarefa n√£o encontrada.');
      }

      subtasks[subtaskIndex] = { ...subtasks[subtaskIndex], ...subtaskData };

      await projectRef.update({ subtasks });
    } catch (error) {
      console.error('Erro ao editar subtarefa:', error);
      throw error;
    }
  },

  // Marcar subtarefa como conclu√≠da
  async toggleSubtaskComplete(userId, projectId, subtaskId) {
    try {
      const projectRef = db.collection('users').doc(userId).collection('projects').doc(projectId);
      const projectDoc = await projectRef.get();

      if (!projectDoc.exists) {
        throw new Error('Projeto n√£o encontrado.');
      }

      const subtasks = projectDoc.data().subtasks;
      const subtaskIndex = subtasks.findIndex((subtask) => subtask.id === subtaskId);

      if (subtaskIndex === -1) {
        throw new Error('Subtarefa n√£o encontrada.');
      }

      subtasks[subtaskIndex].completed = !subtasks[subtaskIndex].completed;

      await projectRef.update({ subtasks });
    } catch (error) {
      console.error('Erro ao atualizar subtarefa:', error);
      throw error;
    }
  },

  // Remover subtarefa de um projeto
  async deleteSubtask(userId, projectId, subtaskId) {
    try {
      const projectRef = db.collection('users').doc(userId).collection('projects').doc(projectId);

      await projectRef.update({
        subtasks: admin.firestore.FieldValue.arrayRemove({ id: subtaskId }),
      });
    } catch (error) {
      console.error('Erro ao deletar subtarefa:', error);
      throw error;
    }
  },
};

module.exports = Project;


==================================================================================================


projectController.js:
const Project = require('../models/Project');
const Task = require('../models/Task');
const Section = require('../models/Section');
const authenticateToken = require('../middleware/authMiddleware');
const { db } = require('../../firebaseConfig');

const projectController = {
  // Cria uma nova tarefa
  async create(req, res) {
    try {
      const { project } = req.body;
      const newProject = await Project.create(req.user.id, { project });
      res.status(201).json(newProject);
    } catch (error) {
      res.status(500).json({ message: 'Erro ao criar tarefa.' });
    }
  },

  // Recupera todas as tarefas do usu√°rio
  async getProjects(req, res) {
    try {
      const projects = await Project.getByUser(req.user.id);
      res.status(200).json(projects);
    } catch (error) {
      res.status(500).json({ message: 'Erro ao recuperar tarefas.' });
    }
  },

  // Recupera um projeto pelo ID
  async getProjectById(req, res) {
    try {
      const projectId = req.params.projectId;
      const project = await Project.getById(req.user.id, projectId); // Implemente este m√©todo no seu Model

      if (project) {
        res.status(200).json(project);
      } else {
        res.status(404).json({ message: 'Projeto n√£o encontrado.' });
      }
    } catch (error) {
      res.status(500).json({ message: 'Erro ao recuperar o projeto.' });
    }
  },

  // Exclui uma tarefa
  async deleteProject(req, res) {
    try {
      const projectId = req.params.projectId;
      const userId = req.user.id; // Obter o userId do token
  
      // Exclua todas as se√ß√µes do projeto
      const sections = await Section.getByProject(userId, projectId); // Passar userId
      for (const section of sections) {
        // Exclua todas as tarefas da se√ß√£o
        const tasks = await Task.getBySection(userId, projectId, section.id); // Passar userId
        for (const task of tasks) {
          await Task.delete(userId, projectId, section.id, task.id); // Passar userId
        }
        await Section.delete(userId, projectId, section.id); // Passar userId
      }
  
      await Project.delete(userId, projectId);
      res.status(204).send();
    } catch (error) {
      console.error('Erro ao excluir projeto:', error); // Logar erro no servidor
      res.status(500).json({ message: 'Erro ao excluir projeto.' });
    }
  },

  // Marca uma tarefa como conclu√≠da ou n√£o conclu√≠da
  async toggleComplete(req, res) {
    try {
      const projectId = req.params.projectId;
      const projectRef = db.collection('users').doc(req.user.id).collection('projects').doc(projectId);

      // Obtenha o status atual da tarefa
      const currentProject = await projectRef.get();

      // Verifica se a tarefa existe
      if (currentProject.exists) {
        const currentCompleted = currentProject.data().completed; // Obter o valor atual de completed

        // Atualiza o status da tarefa com o valor inverso
        await projectRef.update({ completed: !currentCompleted }); 
        res.status(204).send();
      } else {
        res.status(404).json({ message: 'Tarefa n√£o encontrada.' }); 
      }
    } catch (error) {
      res.status(500).json({ message: 'Erro ao atualizar tarefa.' });
    }
  },

  // Criar subtarefa
  async createSubtask(req, res) {
    try {
      const projectId = req.params.projectId;
      const { description } = req.body;
      const newSubtask = await Project.addSubtask(req.user.id, projectId, { description });
      res.status(201).json(newSubtask);
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },

  // Editar subtarefa
  async updateSubtask(req, res) {
    try {
      const projectId = req.params.projectId;
      const subtaskId = req.params.subtaskId;
      const { description, completed } = req.body; // Permite editar descri√ß√£o e status de conclus√£o
      await Project.updateSubtask(req.user.id, projectId, subtaskId, { description, completed });
      res.status(200).json({ message: 'Subtarefa atualizada com sucesso!' });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },

  // Marcar/desmarcar subtarefa como conclu√≠da
  async toggleSubtaskComplete(req, res) {
    try {
      const projectId = req.params.projectId;
      const subtaskId = req.params.subtaskId;
      await Project.toggleSubtaskComplete(req.user.id, projectId, subtaskId);
      res.status(200).json({ message: 'Subtarefa atualizada com sucesso!' });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },

  // Remover subtarefa
  async deleteSubtask(req, res) {
    try {
      const projectId = req.params.projectId;
      const subtaskId = req.params.subtaskId;
      await Project.deleteSubtask(req.user.id, projectId, subtaskId);
      res.status(204).send(); // 204 No Content
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  },

};

module.exports = projectController;


=======================================================================================================


projectRoutes.js:
const express = require('express');
const router = express.Router();
const projectController = require('../controllers/projectController');
const authenticateToken = require('../middleware/authMiddleware');

// **Importe as rotas de se√ß√µes e tarefas**
const sectionRoutes = require('./sectionRoutes');
const taskRoutes = require('./taskRoutes');

// Cria uma novo projeto
router.post('/', authenticateToken, projectController.create);

// Recupera todas os projetos do usu√°rio
router.get('/', authenticateToken, projectController.getProjects);

// Marca um projeto como conclu√≠do ou n√£o conclu√≠do
router.put('/:projectId/complete', authenticateToken, projectController.toggleComplete);

// Exclui um projeto
router.delete('/:projectId', authenticateToken, projectController.deleteProject);

// Rotas para subtarefas
router.post('/:projectId/subtasks', authenticateToken, projectController.createSubtask);
router.put('/:projectId/subtasks/:subtaskId', authenticateToken, projectController.updateSubtask);
router.put('/:projectId/subtasks/:subtaskId/complete', authenticateToken, projectController.toggleSubtaskComplete);
router.delete('/:projectId/subtasks/:subtaskId', authenticateToken, projectController.deleteSubtask);

// Rota para se√ß√µes (integra√ß√£o)
router.use('/:projectId/sections', sectionRoutes); 

// Rota para tarefas (integra√ß√£o)
router.use('/:projectId/sections/:sectionId/tasks', taskRoutes); 

// Recupera um projeto espec√≠fico pelo ID
router.get('/:projectId', authenticateToken, projectController.getProjectById);

module.exports = router;


==============================================================================================================


Section.js:
const { db, admin } = require('../../firebaseConfig');

const Section = {
  async create(userId, projectId, sectionData) {
    try {
      const docRef = await db
        .collection('users')
        .doc(userId)
        .collection('projects') 
        .doc(projectId)
        .collection('sections')
        .add({
          name: sectionData.name,
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
        });

      const sectionDoc = await docRef.get();
      const section = {
        id: sectionDoc.id,
        ...sectionData, 
        createdAt: sectionDoc.data().createdAt.toDate(),
      };

      return section; 
    } catch (error) {
      console.error('Erro ao criar se√ß√£o:', error);
      throw error;
    }
  },

  async getByProject(userId, projectId) { 
    try {
      const sectionsRef = db
        .collection('users')
        .doc(userId)
        .collection('projects') 
        .doc(projectId)
        .collection('sections'); 
      const sectionsSnapshot = await sectionsRef.get();
      const sections = [];

      sectionsSnapshot.forEach(doc => {
        const section = {
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt.toDate(), 
        };
        sections.push(section);
      });

      return sections;
    } catch (error) {
      console.error('Erro ao recuperar se√ß√µes:', error);
      throw error;
    }
  },

  async delete(userId, projectId, sectionId) { 
    try {
      await db
        .collection('users')
        .doc(userId)
        .collection('projects') 
        .doc(projectId)
        .collection('sections') 
        .doc(sectionId)
        .delete();
      return true;
    } catch (error) {
      console.error('Erro ao excluir se√ß√£o:', error);
      throw error;
    }
  },
};

module.exports = Section;

===================================================================================================================


sectionController.js:
// sectionController.js
const Section = require('../models/Section');
const Project = require('../models/Project');
const authenticateToken = require('../middleware/authMiddleware');

const sectionController = {
  async create(req, res) {
    try {
      const { name } = req.body;
      const projectId = req.params.projectId;
      
      // Verifica se o projeto existe
      const project = await Project.findById(req.user.id, projectId);
      if (!project) {
        return res.status(404).json({ message: 'Projeto n√£o encontrado.' });
      }
  
      const newSection = await Section.create(req.user.id, projectId, { name });
      res.status(201).json(newSection);
    } catch (error) {
      res.status(500).json({ message: 'Erro ao criar se√ß√£o.' });
    }
  },

  async getSections(req, res) {
    try {
      const projectId = req.params.projectId; 
      const userId = req.user.id; // Obter o userId
      const sections = await Section.getByProject(userId, projectId); // Passa o userId e projectId
      res.status(200).json(sections);
    } catch (error) {
      res.status(500).json({ message: 'Erro ao recuperar se√ß√µes.' });
    }
  },

  async deleteSection(req, res) {
    try {
      const { projectId, sectionId } = req.params; 
      const userId = req.user.id; // Obter o userId do token
      await Section.delete(userId, projectId, sectionId); // Passa o userId
      res.status(204).send(); 
    } catch (error) {
      console.error('Erro ao excluir se√ß√£o:', error); // Logar o erro no servidor
      res.status(500).json({ message: 'Erro ao excluir se√ß√£o.' });
    }
  },
};

module.exports = sectionController;


=================================================================================================================


sectionRoutes.js:
// sectionRoutes.js
const express = require('express');
const router = express.Router({ mergeParams: true });
const sectionController = require('../controllers/sectionController');
const authenticateToken = require('../middleware/authMiddleware'); 

router.post('/', authenticateToken, sectionController.create);
router.get('/', authenticateToken, sectionController.getSections);
router.delete('/:sectionId', authenticateToken, sectionController.deleteSection);

module.exports = router;


==================================================================================================================


Task.js:
const { db, admin } = require('../../firebaseConfig');

const Task = {
  async create(userId, projectId, sectionId, taskData) {
    try {
      const docRef = await db
        .collection('users')
        .doc(userId)
        .collection('projects') 
        .doc(projectId)
        .collection('sections') 
        .doc(sectionId)
        .collection('tasks') 
        .add({
          title: taskData.title,
          description: '', // Descri√ß√£o inicial vazia
          dueDate: null,     // Prazo inicial nulo
          comments: [],     // Coment√°rios iniciais vazios
          checklist: [],    // Checklist inicial vazio
          collaborators: [], // Colaboradores iniciais vazios
          completed: false,
          createdAt: admin.firestore.FieldValue.serverTimestamp(),
        });

      const taskDoc = await docRef.get();
      const task = {
        id: taskDoc.id,
        ...taskData,
        completed: false,
        createdAt: taskDoc.data().createdAt.toDate(), 
      };

      return task; 
    } catch (error) {
      console.error('Erro ao criar tarefa:', error);
      throw error;
    }
  },

  async getBySection(userId, projectId, sectionId) {
    try {
      const tasksRef = db
        .collection('users') // Refer√™ncia √† cole√ß√£o 'users'
        .doc(userId) 
        .collection('projects')
        .doc(projectId)
        .collection('sections')
        .doc(sectionId)
        .collection('tasks');
      const tasksSnapshot = await tasksRef.get();
      const tasks = [];

      tasksSnapshot.forEach(doc => {
        const task = {
          id: doc.id,
          ...doc.data(),
          createdAt: doc.data().createdAt.toDate(), 
        };
        tasks.push(task);
      });

      return tasks;
    } catch (error) {
      console.error('Erro ao recuperar tarefas:', error);
      throw error;
    }
  },

  async update(userId, projectId, sectionId, taskId, updatedTaskData) {
    try {
      await db
        .collection('users')
        .doc(userId) 
        .collection('projects')
        .doc(projectId)
        .collection('sections')
        .doc(sectionId)
        .collection('tasks') 
        .doc(taskId) 
        .update(updatedTaskData);
      return true; 
    } catch (error) {
      console.error('Erro ao atualizar tarefa:', error);
      throw error;
    }
  },

  async delete(userId, projectId, sectionId, taskId) {
    try {
      await db
        .collection('users')
        .doc(userId) 
        .collection('projects')
        .doc(projectId)
        .collection('sections')
        .doc(sectionId)
        .collection('tasks') 
        .doc(taskId) 
        .delete();
      return true;
    } catch (error) {
      console.error('Erro ao excluir tarefa:', error);
      throw error;
    }
  },
};

module.exports = Task;

===================================================================================================================


taskCOntroller.js:
const Task = require('../models/Task');
const authenticateToken = require('../middleware/authMiddleware');

const taskController = {
  async create(req, res) {
    try {
      const { title } = req.body;
      const { projectId, sectionId } = req.params;
      const userId = req.user.id; // Obter o userId do token
      const newTask = await Task.create(userId, projectId, sectionId, { title }); // Passar userId
      res.status(201).json(newTask);
    } catch (error) {
      console.error('Erro ao criar tarefa:', error); // Logar o erro no servidor
      res.status(500).json({ message: 'Erro ao criar tarefa.' });
    }
  },

  async getTasks(req, res) {
    try {
      const { projectId, sectionId } = req.params;
      const userId = req.user.id; // Obt√©m o userId
      const tasks = await Task.getBySection(userId, projectId, sectionId); // Passa o userId 
      res.status(200).json(tasks);
    } catch (error) {
      res.status(500).json({ message: 'Erro ao recuperar tarefas.' });
    }
  },

  async updateTask(req, res) {
    try {
      const { projectId, sectionId, taskId } = req.params; 
      const userId = req.user.id; // Obter o userId do token
      const updatedTaskData = req.body; 
      await Task.update(userId, projectId, sectionId, taskId, updatedTaskData); // Passar userId
      res.status(204).send(); 
    } catch (error) {
      console.error('Erro ao atualizar tarefa:', error); // Logar o erro no servidor
      res.status(500).json({ message: 'Erro ao atualizar tarefa.' });
    }
  },

  async deleteTask(req, res) {
    try {
      const { projectId, sectionId, taskId } = req.params; 
      const userId = req.user.id; // Obter o userId do token
      await Task.delete(userId, projectId, sectionId, taskId); // Passar userId
      res.status(204).send(); 
    } catch (error) {
      console.error('Erro ao excluir tarefa:', error); // Logar o erro no servidor
      res.status(500).json({ message: 'Erro ao excluir tarefa.' });
    }
  },
};

module.exports = taskController;


=====================================================================================================================


taskRoutes.js:
// taskRoutes.js
const express = require('express');
const router = express.Router({ mergeParams: true }); 
const taskController = require('../controllers/taskController');
const authenticateToken = require('../middleware/authMiddleware');

router.post('/', authenticateToken, taskController.create);
router.get('/', authenticateToken, taskController.getTasks);
router.put('/:taskId', authenticateToken, taskController.updateTask);
router.delete('/:taskId', authenticateToken, taskController.deleteTask);

module.exports = router;


================================================================================================================


user.test.js:
const User = require('../models/user');
const UserController = require('../controllers/UserController');
const { auth, db } = require('../../firebaseConfig');
const bcrypt = require('bcryptjs');

describe('User', () => {
  let testUser;

  beforeEach(async () => {
    // Cria um usu√°rio de teste antes de cada teste.
    const email = `testuser_${Math.random()}@example.com`; // Gerando um endere√ßo de e-mail √∫nico
    const password = 'password123';
    testUser = await User.create(email, password);
  });

  afterEach(async () => {
    // Limpa o usu√°rio de teste ap√≥s cada teste.
    if (testUser) {
      await User.delete(testUser.id);
    }
  });

  it('deve criar um novo usu√°rio', async () => {
    expect(testUser).toBeDefined();
    expect(testUser.id).toBeDefined();
    expect(testUser.email).toContain('testuser'); // Verificando se o email cont√©m "testuser"
  });

  it('deve buscar um usu√°rio por ID', async () => {
    const foundUser = await User.findById(testUser.id);
    expect(foundUser).toBeDefined();
    expect(foundUser.id).toEqual(testUser.id);
    expect(foundUser.email).toEqual(testUser.email);
  });

  it('deve buscar um usu√°rio por email', async () => {
    const foundUser = await User.findByEmail(testUser.email);
    expect(foundUser).toBeDefined();
    expect(foundUser.id).toEqual(testUser.id);
    expect(foundUser.email).toEqual(testUser.email);
  });

  it('deve buscar todos os usu√°rios', async () => {
    // Cria outro usu√°rio para testar a busca de todos os usu√°rios.
    const email = `anotheruser_${Math.random()}@example.com`; // Gerando um endere√ßo de e-mail √∫nico
    const anotherUser = await User.create(email, 'anotherpassword');

    const allUsers = await User.findAll();
    expect(allUsers).toBeDefined();
    expect(allUsers.length).toBeGreaterThanOrEqual(2); 
  });

  it('deve atualizar a senha de um usu√°rio', async () => {
    const req = {
      body: {
        email: testUser.email, // Modificar para usar o email do usu√°rio criado no beforeEach
        oldPassword: 'password123', // Senha antiga do usu√°rio de teste
        newPassword: 'newPassword123' // Nova senha
      }
    };
    const res = {
      json: jest.fn(),
      status: jest.fn()
    };

    // Mock da fun√ß√£o UserController.updatePassword
    jest.spyOn(UserController, 'updatePassword').mockImplementationOnce(() => {
      // Chama a fun√ß√£o res.json dentro da implementa√ß√£o do mock
      res.json({ message: 'Senha atualizada com sucesso' }); 
      return Promise.resolve(); // Retorne uma Promise resolvida para evitar erros
    });

    await UserController.updatePassword(req, res);

    // Verifique se a fun√ß√£o res.json() foi chamada com a mensagem correta
    expect(res.json).toHaveBeenCalledWith({ message: 'Senha atualizada com sucesso' });

    // Limpe o mock depois do teste
    jest.clearAllMocks(); // Use jest.clearAllMocks() para limpar os mocks
  });


  it('deve deletar um usu√°rio', async () => {
    await User.delete(testUser.id);

    // Verifica se o usu√°rio foi deletado do Firestore
    const userDoc = await db.collection('users').doc(testUser.id).get();
    expect(userDoc.exists).toBeFalsy();

    // Verifica se o usu√°rio foi deletado do Firebase Auth
    try {
      await auth.getUser(testUser.id);
    } catch (error) {
      expect(error.code).toEqual('auth/user-not-found');
    }
  });

  it('deve comparar senhas corretamente', async () => {
    const passwordHash = await bcrypt.hash('password123', 10);
    const isMatch = await User.comparePassword('password123', passwordHash);
    expect(isMatch).toBeTruthy();

    const isNotMatch = await User.comparePassword('wrongpassword', passwordHash);
    expect(isNotMatch).toBeFalsy();
  });
});


